user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Frontend upstream for load balancing
    upstream frontend {
        server frontend:5000;
        # Add more frontend instances here if needed:
        # server frontend-instance-2:5000;
        # server frontend-instance-3:5000;
    }

    # Backend API upstream for load balancing
    upstream backend-api {
        server backend-api:5001;
        # Add more backend instances here if needed:
        # server backend-api-instance-2:5001;
        # server backend-api-instance-3:5001;
    }

    # Frontend server configuration
    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy API requests to the backend
        location /api/ {
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://backend-api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Simple health check
        location /health {
            return 200 'OK';
            add_header Content-Type text/plain;
        }
    }
} 